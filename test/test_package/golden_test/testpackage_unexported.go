// DO NOT EDIT
// Code generated by smock 

package testpackage_mock

import (
	fmt "fmt"
	reflect "reflect"
)

// NewMockunexported creates a new mock object which implements the corresponding interface.
// All function calls can be mocked with a custom behavior for tests using the WHEN function on the mock object.   
func NewMockunexported(t interface {
	Fatalf(format string, args ...any)
	Helper()
	Cleanup(f func())
}) *Mockunexported {
	t.Helper()
	m := &Mockunexported{t: t}
	t.Cleanup(func () {
		errStr := ""
		for _, v := range m.vFoo {
			if v.expectedCalled >= 0 && v.expectedCalled != v.called {
				errStr += fmt.Sprintf("\nExpected 'Foo' to be called %d times, but was called %d times.", v.expectedCalled, v.called)
			}
		}
		if errStr != "" {
			t.Helper()
			t.Fatalf(errStr)
		}
	})
	return m
}

type Mockunexported struct {
	t interface {
		Fatalf(format string, args ...any)
		Helper()
	}
	
	vFoo []*struct{fun func(); validateArgs func() bool; expectedCalled int; called int}
}

func (_this *Mockunexported) Foo() {
	for _, _check := range _this.vFoo {
		if _check.validateArgs == nil || _check.validateArgs() {
			_check.called++
			_check.fun()
			return
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Foo", )
}

func (_this *Mockunexported) unexpectedCall(method string, args ...any) {
	argsStr := ""
	for idx, arg := range args {
		switch t := reflect.TypeOf(arg); {
		case t.Kind() == reflect.Func:
			argsStr += fmt.Sprintf("%T", t)
		case t.Kind() == reflect.String:
			argsStr += fmt.Sprintf("%q", arg)
		default:
			argsStr += fmt.Sprintf("%+v", arg)
		}
		if idx+1 < len(args) {
			argsStr += ", "
		}
	}
	_this.t.Helper()
	_this.t.Fatalf(`Unexpected call to %s(). If function call is expected add ".WHEN.%s()" to mock.`, method, method)
}

// WHEN is used to set the mock behavior when a specific functions on the object are called.
// Use this to setup your mock for your specific test scenario.
func (_this *Mockunexported) WHEN() *MockunexportedWhen {
	return &MockunexportedWhen{
		m: _this,
	}
}

type MockunexportedWhen struct {
	m *Mockunexported
}

// Defines the behavior when Foo of the mock is called.
//
// As a default the method can be called any times.
// To change this behavior use the Times() method to define how often the function shall be called.
func (_this *MockunexportedWhen) Foo() *MockunexportedFooWhen {
	for _, f := range _this.m.vFoo {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Foo' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func()
		validateArgs func() bool
		expectedCalled int
		called int
	}
	validator.fun = func() {}
	validator.expectedCalled = -1
	_this.m.vFoo = append(_this.m.vFoo, &validator)
	return &MockunexportedFooWhen{fun: &validator.fun, MockunexportedTimes: &MockunexportedTimes{expectedCalled: &validator.expectedCalled}} 
}

type MockunexportedFooWhen struct {
	*MockunexportedTimes
	fun *func()
}

// Do will execute the provided function and return the result when called
func (_this *MockunexportedFooWhen) Do(do func()) *MockunexportedTimes {
	*_this.fun = do
	return _this.MockunexportedTimes
}

type MockunexportedTimes struct {
	expectedCalled *int
}

// Times sets how often the mocked function is expected to be called.
// Test will fail if the number of calls do not match with the expected calls value.
//
// A number < 0 means that a function may be called any times which is also the default behavior.
func (_this *MockunexportedTimes) Times(times int) {
	*_this.expectedCalled = times
}

// AnyTimes disables the check how often a function was called.
func (_this *MockunexportedTimes) AnyTimes() {
	*_this.expectedCalled = -1
}

// Never will fail if the function is ever called. Is the same as Times(0).
func (_this *MockunexportedTimes) Never() {
	*_this.expectedCalled = 0
}

// Once will fail if the function is not called once. Is the same as Times(1).
func (_this *MockunexportedTimes) Once() {
	*_this.expectedCalled = 1
}
