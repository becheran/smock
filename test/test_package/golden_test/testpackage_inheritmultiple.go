// DO NOT EDIT
// Code generated by smock 

package testpackage_mock

import (
	io "io"
	os "os"
	testpackage "github.com/test/testpackage"
	"fmt"
	"reflect"
)

// MockInheritMultiple must implement interface testpackage.InheritMultiple
var _ testpackage.InheritMultiple = &MockInheritMultiple{}

func NewMockInheritMultiple(t interface {
	Fatalf(format string, args ...interface{})
	Helper()
}) *MockInheritMultiple {
	return &MockInheritMultiple{t: t}
}

type MockInheritMultiple struct {
	t interface {
		Fatalf(format string, args ...interface{})
		Helper()
	}
	
	vOwn []*struct{fun func(i0 int, i1 string) (r0 int, r1 string); validateArgs func(i0 int, i1 string) bool}
	vRetType []*struct{fun func() (r0 testpackage.MyType); validateArgs func() bool}
	vUseStdType []*struct{fun func(fi os.FileInfo) (r0 io.Reader); validateArgs func(fi os.FileInfo) bool}
	vClose []*struct{fun func() (r0 error); validateArgs func() bool}
	vRead []*struct{fun func(p []byte) (n int, err error); validateArgs func(p []byte) bool}
	vSeek []*struct{fun func(offset int64, whence int) (r0 int64, r1 error); validateArgs func(offset int64, whence int) bool}
}

func (_this *MockInheritMultiple) Own(i0 int, i1 string) (r0 int, r1 string) {
	for _, _check := range _this.vOwn {
		if _check.validateArgs == nil || _check.validateArgs(i0, i1) {
			return _check.fun(i0, i1)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Own", i0, i1)
	return
}

func (_this *MockInheritMultiple) RetType() (r0 testpackage.MyType) {
	for _, _check := range _this.vRetType {
		if _check.validateArgs == nil || _check.validateArgs() {
			return _check.fun()
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("RetType", )
	return
}

func (_this *MockInheritMultiple) UseStdType(fi os.FileInfo) (r0 io.Reader) {
	for _, _check := range _this.vUseStdType {
		if _check.validateArgs == nil || _check.validateArgs(fi) {
			return _check.fun(fi)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("UseStdType", fi)
	return
}

func (_this *MockInheritMultiple) Close() (r0 error) {
	for _, _check := range _this.vClose {
		if _check.validateArgs == nil || _check.validateArgs() {
			return _check.fun()
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Close", )
	return
}

func (_this *MockInheritMultiple) Read(p []byte) (n int, err error) {
	for _, _check := range _this.vRead {
		if _check.validateArgs == nil || _check.validateArgs(p) {
			return _check.fun(p)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Read", p)
	return
}

func (_this *MockInheritMultiple) Seek(offset int64, whence int) (r0 int64, r1 error) {
	for _, _check := range _this.vSeek {
		if _check.validateArgs == nil || _check.validateArgs(offset, whence) {
			return _check.fun(offset, whence)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Seek", offset, whence)
	return
}

func (_this *MockInheritMultiple) unexpectedCall(method string, args ...any) {
	argsStr := ""
	for idx, arg := range args {
		switch t := reflect.TypeOf(arg); {
		case t.Kind() == reflect.Func:
			argsStr += fmt.Sprintf("%T", t)
		case t.Kind() == reflect.String:
			argsStr += fmt.Sprintf("%q", arg)
		default:
			argsStr += fmt.Sprintf("%+v", arg)
		}
		if idx+1 < len(args) {
			argsStr += ", "
		}
	}
	_this.t.Helper()
	_this.t.Fatalf(`Unexpected call %s(%s)`, method, argsStr)
}

func (_this *MockInheritMultiple) WHEN() *MockInheritMultipleWhen {
	return &MockInheritMultipleWhen{
		m: _this,
	}
}

type MockInheritMultipleWhen struct {
	m *MockInheritMultiple
}

func (_this *MockInheritMultipleWhen) Own() *MockInheritMultipleOwnArgs {
	for _, f := range _this.m.vOwn {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Own' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(i0 int, i1 string) (r0 int, r1 string)
		validateArgs func(i0 int, i1 string) bool
	}
	validator.fun = func(i0 int, i1 string) (r0 int, r1 string) { return }
	_this.m.vOwn = append(_this.m.vOwn, &validator)
	return &MockInheritMultipleOwnArgs {
		MockInheritMultipleOwnArgsEval: MockInheritMultipleOwnArgsEval{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockInheritMultipleOwnArgs struct {
	MockInheritMultipleOwnArgsEval
	fun *func(i0 int, i1 string) (r0 int, r1 string)
	validateArgs *func(i0 int, i1 string) bool
}

func (_this *MockInheritMultipleOwnArgs) Expect(_0 func(int) bool, _1 func(string) bool) *MockInheritMultipleOwnArgsEval {
	if !(_0 == nil && _1 == nil) {
		*_this.validateArgs = func(_i0 int, _i1 string) bool {
			return (_0 == nil || _0(_i0)) && (_1 == nil || _1(_i1))
		}
	}
	return &_this.MockInheritMultipleOwnArgsEval
}

type MockInheritMultipleOwnArgsEval struct {
	fun *func(i0 int, i1 string) (r0 int, r1 string)
}

func (_this *MockInheritMultipleOwnArgsEval) Return(r0 int, r1 string) {
	*_this.fun = func(int, string) (int, string) { return r0, r1 }
}

func (_this *MockInheritMultipleOwnArgsEval) Do(do func(i0 int, i1 string) (r0 int, r1 string)) {
	*_this.fun = do
}

func (_this *MockInheritMultipleWhen) RetType() *MockInheritMultipleRetTypeArgsEval {
	for _, f := range _this.m.vRetType {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'RetType' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func() (r0 testpackage.MyType)
		validateArgs func() bool
	}
	validator.fun = func() (r0 testpackage.MyType) { return }
	_this.m.vRetType = append(_this.m.vRetType, &validator)
	return &MockInheritMultipleRetTypeArgsEval {
		fun: &validator.fun,
	}
}

type MockInheritMultipleRetTypeArgsEval struct {
	fun *func() (r0 testpackage.MyType)
}

func (_this *MockInheritMultipleRetTypeArgsEval) Return(r0 testpackage.MyType) {
	*_this.fun = func() (testpackage.MyType) { return r0 }
}

func (_this *MockInheritMultipleRetTypeArgsEval) Do(do func() (r0 testpackage.MyType)) {
	*_this.fun = do
}

func (_this *MockInheritMultipleWhen) UseStdType() *MockInheritMultipleUseStdTypeArgs {
	for _, f := range _this.m.vUseStdType {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'UseStdType' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(fi os.FileInfo) (r0 io.Reader)
		validateArgs func(fi os.FileInfo) bool
	}
	validator.fun = func(fi os.FileInfo) (r0 io.Reader) { return }
	_this.m.vUseStdType = append(_this.m.vUseStdType, &validator)
	return &MockInheritMultipleUseStdTypeArgs {
		MockInheritMultipleUseStdTypeArgsEval: MockInheritMultipleUseStdTypeArgsEval{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockInheritMultipleUseStdTypeArgs struct {
	MockInheritMultipleUseStdTypeArgsEval
	fun *func(fi os.FileInfo) (r0 io.Reader)
	validateArgs *func(fi os.FileInfo) bool
}

func (_this *MockInheritMultipleUseStdTypeArgs) Expect(fi func(os.FileInfo) bool) *MockInheritMultipleUseStdTypeArgsEval {
	if !(fi == nil) {
		*_this.validateArgs = func(_fi os.FileInfo) bool {
			return (fi == nil || fi(_fi))
		}
	}
	return &_this.MockInheritMultipleUseStdTypeArgsEval
}

type MockInheritMultipleUseStdTypeArgsEval struct {
	fun *func(fi os.FileInfo) (r0 io.Reader)
}

func (_this *MockInheritMultipleUseStdTypeArgsEval) Return(r0 io.Reader) {
	*_this.fun = func(os.FileInfo) (io.Reader) { return r0 }
}

func (_this *MockInheritMultipleUseStdTypeArgsEval) Do(do func(fi os.FileInfo) (r0 io.Reader)) {
	*_this.fun = do
}

func (_this *MockInheritMultipleWhen) Close() *MockInheritMultipleCloseArgsEval {
	for _, f := range _this.m.vClose {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Close' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func() (r0 error)
		validateArgs func() bool
	}
	validator.fun = func() (r0 error) { return }
	_this.m.vClose = append(_this.m.vClose, &validator)
	return &MockInheritMultipleCloseArgsEval {
		fun: &validator.fun,
	}
}

type MockInheritMultipleCloseArgsEval struct {
	fun *func() (r0 error)
}

func (_this *MockInheritMultipleCloseArgsEval) Return(r0 error) {
	*_this.fun = func() (error) { return r0 }
}

func (_this *MockInheritMultipleCloseArgsEval) Do(do func() (r0 error)) {
	*_this.fun = do
}

func (_this *MockInheritMultipleWhen) Read() *MockInheritMultipleReadArgs {
	for _, f := range _this.m.vRead {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Read' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(p []byte) (n int, err error)
		validateArgs func(p []byte) bool
	}
	validator.fun = func(p []byte) (n int, err error) { return }
	_this.m.vRead = append(_this.m.vRead, &validator)
	return &MockInheritMultipleReadArgs {
		MockInheritMultipleReadArgsEval: MockInheritMultipleReadArgsEval{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockInheritMultipleReadArgs struct {
	MockInheritMultipleReadArgsEval
	fun *func(p []byte) (n int, err error)
	validateArgs *func(p []byte) bool
}

func (_this *MockInheritMultipleReadArgs) Expect(p func([]byte) bool) *MockInheritMultipleReadArgsEval {
	if !(p == nil) {
		*_this.validateArgs = func(_p []byte) bool {
			return (p == nil || p(_p))
		}
	}
	return &_this.MockInheritMultipleReadArgsEval
}

type MockInheritMultipleReadArgsEval struct {
	fun *func(p []byte) (n int, err error)
}

func (_this *MockInheritMultipleReadArgsEval) Return(n int, err error) {
	*_this.fun = func([]byte) (int, error) { return n, err }
}

func (_this *MockInheritMultipleReadArgsEval) Do(do func(p []byte) (n int, err error)) {
	*_this.fun = do
}

func (_this *MockInheritMultipleWhen) Seek() *MockInheritMultipleSeekArgs {
	for _, f := range _this.m.vSeek {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Seek' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(offset int64, whence int) (r0 int64, r1 error)
		validateArgs func(offset int64, whence int) bool
	}
	validator.fun = func(offset int64, whence int) (r0 int64, r1 error) { return }
	_this.m.vSeek = append(_this.m.vSeek, &validator)
	return &MockInheritMultipleSeekArgs {
		MockInheritMultipleSeekArgsEval: MockInheritMultipleSeekArgsEval{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockInheritMultipleSeekArgs struct {
	MockInheritMultipleSeekArgsEval
	fun *func(offset int64, whence int) (r0 int64, r1 error)
	validateArgs *func(offset int64, whence int) bool
}

func (_this *MockInheritMultipleSeekArgs) Expect(offset func(int64) bool, whence func(int) bool) *MockInheritMultipleSeekArgsEval {
	if !(offset == nil && whence == nil) {
		*_this.validateArgs = func(_offset int64, _whence int) bool {
			return (offset == nil || offset(_offset)) && (whence == nil || whence(_whence))
		}
	}
	return &_this.MockInheritMultipleSeekArgsEval
}

type MockInheritMultipleSeekArgsEval struct {
	fun *func(offset int64, whence int) (r0 int64, r1 error)
}

func (_this *MockInheritMultipleSeekArgsEval) Return(r0 int64, r1 error) {
	*_this.fun = func(int64, int) (int64, error) { return r0, r1 }
}

func (_this *MockInheritMultipleSeekArgsEval) Do(do func(offset int64, whence int) (r0 int64, r1 error)) {
	*_this.fun = do
}
