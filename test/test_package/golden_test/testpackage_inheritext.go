// DO NOT EDIT
// Code generated by smock 

package testpackage_mock

import (
	testpackage "github.com/test/testpackage"
	"fmt"
	"reflect"
)

// MockInheritExt must implement interface testpackage.InheritExt
var _ testpackage.InheritExt = &MockInheritExt{}

func NewMockInheritExt(t interface {
	Fatalf(format string, args ...interface{})
	Helper()
}) *MockInheritExt {
	return &MockInheritExt{t: t}
}

type MockInheritExt struct {
	t interface {
		Fatalf(format string, args ...interface{})
		Helper()
	}
	
	vClose []*struct{fun func() (r0 error); validateArgs func() bool}
	vRead []*struct{fun func(p []byte) (n int, err error); validateArgs func(p []byte) bool}
	vSeek []*struct{fun func(offset int64, whence int) (r0 int64, r1 error); validateArgs func(offset int64, whence int) bool}
}

func (_this *MockInheritExt) Close() (r0 error) {
	for _, _check := range _this.vClose {
		if _check.validateArgs == nil || _check.validateArgs() {
			return _check.fun()
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Close", )
	return
}

func (_this *MockInheritExt) Read(p []byte) (n int, err error) {
	for _, _check := range _this.vRead {
		if _check.validateArgs == nil || _check.validateArgs(p) {
			return _check.fun(p)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Read", p)
	return
}

func (_this *MockInheritExt) Seek(offset int64, whence int) (r0 int64, r1 error) {
	for _, _check := range _this.vSeek {
		if _check.validateArgs == nil || _check.validateArgs(offset, whence) {
			return _check.fun(offset, whence)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Seek", offset, whence)
	return
}

func (_this *MockInheritExt) unexpectedCall(method string, args ...any) {
	argsStr := ""
	for idx, arg := range args {
		switch t := reflect.TypeOf(arg); {
		case t.Kind() == reflect.Func:
			argsStr += fmt.Sprintf("%T", t)
		case t.Kind() == reflect.String:
			argsStr += fmt.Sprintf("%q", arg)
		default:
			argsStr += fmt.Sprintf("%+v", arg)
		}
		if idx+1 < len(args) {
			argsStr += ", "
		}
	}
	_this.t.Helper()
	_this.t.Fatalf(`Unexpected call %s(%s)`, method, argsStr)
}

func (_this *MockInheritExt) WHEN() *MockInheritExtWhen {
	return &MockInheritExtWhen{
		m: _this,
	}
}

type MockInheritExtWhen struct {
	m *MockInheritExt
}

func (_this *MockInheritExtWhen) Close() *MockInheritExtCloseArgsEval {
	for _, f := range _this.m.vClose {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Close' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func() (r0 error)
		validateArgs func() bool
	}
	validator.fun = func() (r0 error) { return }
	_this.m.vClose = append(_this.m.vClose, &validator)
	return &MockInheritExtCloseArgsEval {
		fun: &validator.fun,
	}
}

type MockInheritExtCloseArgsEval struct {
	fun *func() (r0 error)
}

func (_this *MockInheritExtCloseArgsEval) Return(r0 error) {
	*_this.fun = func() (error) { return r0 }
}

func (_this *MockInheritExtCloseArgsEval) Do(do func() (r0 error)) {
	*_this.fun = do
}

func (_this *MockInheritExtWhen) Read() *MockInheritExtReadArgs {
	for _, f := range _this.m.vRead {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Read' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(p []byte) (n int, err error)
		validateArgs func(p []byte) bool
	}
	validator.fun = func(p []byte) (n int, err error) { return }
	_this.m.vRead = append(_this.m.vRead, &validator)
	return &MockInheritExtReadArgs {
		MockInheritExtReadArgsEval: MockInheritExtReadArgsEval{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockInheritExtReadArgs struct {
	MockInheritExtReadArgsEval
	fun *func(p []byte) (n int, err error)
	validateArgs *func(p []byte) bool
}

func (_this *MockInheritExtReadArgs) Expect(p func([]byte) bool) *MockInheritExtReadArgsEval {
	if !(p == nil) {
		*_this.validateArgs = func(_p []byte) bool {
			return (p == nil || p(_p))
		}
	}
	return &_this.MockInheritExtReadArgsEval
}

type MockInheritExtReadArgsEval struct {
	fun *func(p []byte) (n int, err error)
}

func (_this *MockInheritExtReadArgsEval) Return(n int, err error) {
	*_this.fun = func([]byte) (int, error) { return n, err }
}

func (_this *MockInheritExtReadArgsEval) Do(do func(p []byte) (n int, err error)) {
	*_this.fun = do
}

func (_this *MockInheritExtWhen) Seek() *MockInheritExtSeekArgs {
	for _, f := range _this.m.vSeek {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Seek' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(offset int64, whence int) (r0 int64, r1 error)
		validateArgs func(offset int64, whence int) bool
	}
	validator.fun = func(offset int64, whence int) (r0 int64, r1 error) { return }
	_this.m.vSeek = append(_this.m.vSeek, &validator)
	return &MockInheritExtSeekArgs {
		MockInheritExtSeekArgsEval: MockInheritExtSeekArgsEval{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockInheritExtSeekArgs struct {
	MockInheritExtSeekArgsEval
	fun *func(offset int64, whence int) (r0 int64, r1 error)
	validateArgs *func(offset int64, whence int) bool
}

func (_this *MockInheritExtSeekArgs) Expect(offset func(int64) bool, whence func(int) bool) *MockInheritExtSeekArgsEval {
	if !(offset == nil && whence == nil) {
		*_this.validateArgs = func(_offset int64, _whence int) bool {
			return (offset == nil || offset(_offset)) && (whence == nil || whence(_whence))
		}
	}
	return &_this.MockInheritExtSeekArgsEval
}

type MockInheritExtSeekArgsEval struct {
	fun *func(offset int64, whence int) (r0 int64, r1 error)
}

func (_this *MockInheritExtSeekArgsEval) Return(r0 int64, r1 error) {
	*_this.fun = func(int64, int) (int64, error) { return r0, r1 }
}

func (_this *MockInheritExtSeekArgsEval) Do(do func(offset int64, whence int) (r0 int64, r1 error)) {
	*_this.fun = do
}
