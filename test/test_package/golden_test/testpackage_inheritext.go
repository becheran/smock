// DO NOT EDIT
// Code generated by smock 

package testpackage_mock

import (
	testpackage "github.com/test/testpackage"
	"fmt"
)

// MockInheritExt must implement interface testpackage.InheritExt
var _ testpackage.InheritExt = &MockInheritExt{}

func NewMockInheritExt(t interface {
	Fatalf(format string, args ...interface{})
	Helper()
}) *MockInheritExt {
	return &MockInheritExt{t: t}
}

type MockInheritExt struct {
	testpackage.InheritExt
	
	t interface {
		Fatalf(format string, args ...interface{})
		Helper()
	}
	
	fClose func() (r0 error)
	fRead func(p []byte) (n int, err error)
	fSeek func(offset int64, whence int) (r0 int64, r1 error)
}

func (m *MockInheritExt) Close() (r0 error) {
	if m.fClose != nil {
		return m.fClose()
	} else {
		m.unexpectedCall("Close", fmt.Sprintf(""))
		return
	}
}

func (m *MockInheritExt) Read(p []byte) (n int, err error) {
	if m.fRead != nil {
		return m.fRead(p)
	} else {
		m.unexpectedCall("Read", fmt.Sprintf("%+v", p))
		return
	}
}

func (m *MockInheritExt) Seek(offset int64, whence int) (r0 int64, r1 error) {
	if m.fSeek != nil {
		return m.fSeek(offset, whence)
	} else {
		m.unexpectedCall("Seek", fmt.Sprintf("%+v, %+v", offset, whence))
		return
	}
}

func (m *MockInheritExt) WHEN() *MockInheritExtWhen {
	return &MockInheritExtWhen{
		m: m,
	}
}

func (m *MockInheritExt) unexpectedCall(method, args string) {
	m.t.Helper()
	m.t.Fatalf(`Unexpected call to MockInheritExt.%s(%s)`, method, args)
}

type MockInheritExtWhen struct {
	m *MockInheritExt
}

func (mh *MockInheritExtWhen) Close() *MockInheritExtCloseFunc {
	mh.m.fClose = func() (r0 error) { return }
	return &MockInheritExtCloseFunc{m: mh.m}
}

type MockInheritExtCloseFunc struct {
	m *MockInheritExt
}

func (f *MockInheritExtCloseFunc) Return(r0 error) {
	f.m.fClose = func() (error) { return r0 }
}

func (f *MockInheritExtCloseFunc) Do(do func() (r0 error)) {
	f.m.fClose = do
}

func (mh *MockInheritExtWhen) Read() *MockInheritExtReadFunc {
	mh.m.fRead = func(p []byte) (n int, err error) { return }
	return &MockInheritExtReadFunc{m: mh.m}
}

type MockInheritExtReadFunc struct {
	m *MockInheritExt
}

func (f *MockInheritExtReadFunc) Return(n int, err error) {
	f.m.fRead = func([]byte) (int, error) { return n, err }
}

func (f *MockInheritExtReadFunc) Do(do func(p []byte) (n int, err error)) {
	f.m.fRead = do
}

func (mh *MockInheritExtWhen) Seek() *MockInheritExtSeekFunc {
	mh.m.fSeek = func(offset int64, whence int) (r0 int64, r1 error) { return }
	return &MockInheritExtSeekFunc{m: mh.m}
}

type MockInheritExtSeekFunc struct {
	m *MockInheritExt
}

func (f *MockInheritExtSeekFunc) Return(r0 int64, r1 error) {
	f.m.fSeek = func(int64, int) (int64, error) { return r0, r1 }
}

func (f *MockInheritExtSeekFunc) Do(do func(offset int64, whence int) (r0 int64, r1 error)) {
	f.m.fSeek = do
}
