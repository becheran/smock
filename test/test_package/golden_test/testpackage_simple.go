// DO NOT EDIT
// Code generated by smock 

package testpackage_mock

import (
	testpackage "github.com/test/testpackage"
	"fmt"
	"reflect"
)

// MockSimple must implement interface testpackage.Simple
var _ testpackage.Simple = &MockSimple{}

func NewMockSimple(t interface {
	Fatalf(format string, args ...interface{})
	Helper()
}) *MockSimple {
	return &MockSimple{t: t}
}

type MockSimple struct {
	t interface {
		Fatalf(format string, args ...interface{})
		Helper()
	}
	
	vFoo []*struct{fun func(); validateArgs func() bool}
	vBar []*struct{fun func(a int, b string, c struct{}, d *struct{}, e interface{}, f []byte) (r0 string); validateArgs func(a int, b string, c struct{}, d *struct{}, e interface{}, f []byte) bool}
	vBaz []*struct{fun func(a int, b string) (s string); validateArgs func(a int, b string) bool}
	vFun []*struct{fun func(a func(func(string, string) (int, int), func(string, string) (int, int)), b func(func(string, string) (int, int), func(string, string) (int, int))) (r func(), r2 func()); validateArgs func(a func(func(string, string) (int, int), func(string, string) (int, int)), b func(func(string, string) (int, int), func(string, string) (int, int))) bool}
}

func (_this *MockSimple) Foo() {
	for _, _check := range _this.vFoo {
		if _check.validateArgs == nil || _check.validateArgs() {
			_check.fun()
			return
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Foo", )
}

func (_this *MockSimple) Bar(a int, b string, c struct{}, d *struct{}, e interface{}, f []byte) (r0 string) {
	for _, _check := range _this.vBar {
		if _check.validateArgs == nil || _check.validateArgs(a, b, c, d, e, f) {
			return _check.fun(a, b, c, d, e, f)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Bar", a, b, c, d, e, f)
	return
}

func (_this *MockSimple) Baz(a int, b string) (s string) {
	for _, _check := range _this.vBaz {
		if _check.validateArgs == nil || _check.validateArgs(a, b) {
			return _check.fun(a, b)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Baz", a, b)
	return
}

func (_this *MockSimple) Fun(a func(func(string, string) (int, int), func(string, string) (int, int)), b func(func(string, string) (int, int), func(string, string) (int, int))) (r func(), r2 func()) {
	for _, _check := range _this.vFun {
		if _check.validateArgs == nil || _check.validateArgs(a, b) {
			return _check.fun(a, b)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Fun", a, b)
	return
}

func (_this *MockSimple) unexpectedCall(method string, args ...any) {
	argsStr := ""
	for idx, arg := range args {
		switch t := reflect.TypeOf(arg); {
		case t.Kind() == reflect.Func:
			argsStr += fmt.Sprintf("%T", t)
		case t.Kind() == reflect.String:
			argsStr += fmt.Sprintf("%q", arg)
		default:
			argsStr += fmt.Sprintf("%+v", arg)
		}
		if idx+1 < len(args) {
			argsStr += ", "
		}
	}
	_this.t.Helper()
	_this.t.Fatalf(`Unexpected call %s(%s)`, method, argsStr)
}

func (_this *MockSimple) WHEN() *MockSimpleWhen {
	return &MockSimpleWhen{
		m: _this,
	}
}

type MockSimpleWhen struct {
	m *MockSimple
}

func (_this *MockSimpleWhen) Foo() *MockSimpleFooArgsEval {
	for _, f := range _this.m.vFoo {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Foo' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func()
		validateArgs func() bool
	}
	validator.fun = func() { }
	_this.m.vFoo = append(_this.m.vFoo, &validator)
	return &MockSimpleFooArgsEval {
		fun: &validator.fun,
	}
}

type MockSimpleFooArgsEval struct {
	fun *func()
}

func (_this *MockSimpleFooArgsEval) Do(do func()) {
	*_this.fun = do
}

func (_this *MockSimpleWhen) Bar() *MockSimpleBarArgs {
	for _, f := range _this.m.vBar {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Bar' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(a int, b string, c struct{}, d *struct{}, e interface{}, f []byte) (r0 string)
		validateArgs func(a int, b string, c struct{}, d *struct{}, e interface{}, f []byte) bool
	}
	validator.fun = func(a int, b string, c struct{}, d *struct{}, e interface{}, f []byte) (r0 string) { return }
	_this.m.vBar = append(_this.m.vBar, &validator)
	return &MockSimpleBarArgs {
		MockSimpleBarArgsEval: MockSimpleBarArgsEval{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockSimpleBarArgs struct {
	MockSimpleBarArgsEval
	fun *func(a int, b string, c struct{}, d *struct{}, e interface{}, f []byte) (r0 string)
	validateArgs *func(a int, b string, c struct{}, d *struct{}, e interface{}, f []byte) bool
}

func (_this *MockSimpleBarArgs) Expect(a func(int) bool, b func(string) bool, c func(struct{}) bool, d func(*struct{}) bool, e func(interface{}) bool, f func([]byte) bool) *MockSimpleBarArgsEval {
	if !(a == nil && b == nil && c == nil && d == nil && e == nil && f == nil) {
		*_this.validateArgs = func(_a int, _b string, _c struct{}, _d *struct{}, _e interface{}, _f []byte) bool {
			return (a == nil || a(_a)) && (b == nil || b(_b)) && (c == nil || c(_c)) && (d == nil || d(_d)) && (e == nil || e(_e)) && (f == nil || f(_f))
		}
	}
	return &_this.MockSimpleBarArgsEval
}

type MockSimpleBarArgsEval struct {
	fun *func(a int, b string, c struct{}, d *struct{}, e interface{}, f []byte) (r0 string)
}

func (_this *MockSimpleBarArgsEval) Return(r0 string) {
	*_this.fun = func(int, string, struct{}, *struct{}, interface{}, []byte) (string) { return r0 }
}

func (_this *MockSimpleBarArgsEval) Do(do func(a int, b string, c struct{}, d *struct{}, e interface{}, f []byte) (r0 string)) {
	*_this.fun = do
}

func (_this *MockSimpleWhen) Baz() *MockSimpleBazArgs {
	for _, f := range _this.m.vBaz {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Baz' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(a int, b string) (s string)
		validateArgs func(a int, b string) bool
	}
	validator.fun = func(a int, b string) (s string) { return }
	_this.m.vBaz = append(_this.m.vBaz, &validator)
	return &MockSimpleBazArgs {
		MockSimpleBazArgsEval: MockSimpleBazArgsEval{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockSimpleBazArgs struct {
	MockSimpleBazArgsEval
	fun *func(a int, b string) (s string)
	validateArgs *func(a int, b string) bool
}

func (_this *MockSimpleBazArgs) Expect(a func(int) bool, b func(string) bool) *MockSimpleBazArgsEval {
	if !(a == nil && b == nil) {
		*_this.validateArgs = func(_a int, _b string) bool {
			return (a == nil || a(_a)) && (b == nil || b(_b))
		}
	}
	return &_this.MockSimpleBazArgsEval
}

type MockSimpleBazArgsEval struct {
	fun *func(a int, b string) (s string)
}

func (_this *MockSimpleBazArgsEval) Return(s string) {
	*_this.fun = func(int, string) (string) { return s }
}

func (_this *MockSimpleBazArgsEval) Do(do func(a int, b string) (s string)) {
	*_this.fun = do
}

func (_this *MockSimpleWhen) Fun() *MockSimpleFunArgs {
	for _, f := range _this.m.vFun {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Fun' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(a func(func(string, string) (int, int), func(string, string) (int, int)), b func(func(string, string) (int, int), func(string, string) (int, int))) (r func(), r2 func())
		validateArgs func(a func(func(string, string) (int, int), func(string, string) (int, int)), b func(func(string, string) (int, int), func(string, string) (int, int))) bool
	}
	validator.fun = func(a func(func(string, string) (int, int), func(string, string) (int, int)), b func(func(string, string) (int, int), func(string, string) (int, int))) (r func(), r2 func()) { return }
	_this.m.vFun = append(_this.m.vFun, &validator)
	return &MockSimpleFunArgs {
		MockSimpleFunArgsEval: MockSimpleFunArgsEval{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockSimpleFunArgs struct {
	MockSimpleFunArgsEval
	fun *func(a func(func(string, string) (int, int), func(string, string) (int, int)), b func(func(string, string) (int, int), func(string, string) (int, int))) (r func(), r2 func())
	validateArgs *func(a func(func(string, string) (int, int), func(string, string) (int, int)), b func(func(string, string) (int, int), func(string, string) (int, int))) bool
}

func (_this *MockSimpleFunArgs) Expect(a func(func(func(string, string) (int, int), func(string, string) (int, int))) bool, b func(func(func(string, string) (int, int), func(string, string) (int, int))) bool) *MockSimpleFunArgsEval {
	if !(a == nil && b == nil) {
		*_this.validateArgs = func(_a func(func(string, string) (int, int), func(string, string) (int, int)), _b func(func(string, string) (int, int), func(string, string) (int, int))) bool {
			return (a == nil || a(_a)) && (b == nil || b(_b))
		}
	}
	return &_this.MockSimpleFunArgsEval
}

type MockSimpleFunArgsEval struct {
	fun *func(a func(func(string, string) (int, int), func(string, string) (int, int)), b func(func(string, string) (int, int), func(string, string) (int, int))) (r func(), r2 func())
}

func (_this *MockSimpleFunArgsEval) Return(r func(), r2 func()) {
	*_this.fun = func(func(func(string, string) (int, int), func(string, string) (int, int)), func(func(string, string) (int, int), func(string, string) (int, int))) (func(), func()) { return r, r2 }
}

func (_this *MockSimpleFunArgsEval) Do(do func(a func(func(string, string) (int, int), func(string, string) (int, int)), b func(func(string, string) (int, int), func(string, string) (int, int))) (r func(), r2 func())) {
	*_this.fun = do
}
