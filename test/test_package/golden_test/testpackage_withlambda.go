// DO NOT EDIT
// Code generated by smock 

package testpackage_mock

import (
	"fmt"
	"reflect"
)

// NewMockWithLambda creates a new mock object which implements the corresponding interface.
// All function calls can be mocked with a custom behavior for tests using the WHEN function on the mock object.   
func NewMockWithLambda[T comparable](t interface {
	Fatalf(format string, args ...interface{})
	Helper()
	Cleanup(f func())
}) *mockWithLambda[T] {
	t.Helper()
	m := &mockWithLambda[T]{t: t}
	t.Cleanup(func () {
		errStr := ""
		for _, v := range m.vFoo {
			if v.expectedCalled >= 0 && v.expectedCalled != v.called {
				errStr += fmt.Sprintf("\nExpected 'Foo' to be called %d times, but was called %d times.", v.expectedCalled, v.called)
			}
		}
		for _, v := range m.vBar {
			if v.expectedCalled >= 0 && v.expectedCalled != v.called {
				errStr += fmt.Sprintf("\nExpected 'Bar' to be called %d times, but was called %d times.", v.expectedCalled, v.called)
			}
		}
		for _, v := range m.vBaz {
			if v.expectedCalled >= 0 && v.expectedCalled != v.called {
				errStr += fmt.Sprintf("\nExpected 'Baz' to be called %d times, but was called %d times.", v.expectedCalled, v.called)
			}
		}
		if errStr != "" {
			t.Helper()
			t.Fatalf(errStr)
		}
	})
	return m
}

type mockWithLambda[T comparable] struct {
	t interface {
		Fatalf(format string, args ...interface{})
		Helper()
	}
	
	vFoo []*struct{fun func(a int, b ...string) (r0 bool); validateArgs func(a int, b ...string) bool; expectedCalled int; called int}
	vBar []*struct{fun func(b ...struct{}) (r0 bool); validateArgs func(b ...struct{}) bool; expectedCalled int; called int}
	vBaz []*struct{fun func(b ...T) (r0 bool); validateArgs func(b ...T) bool; expectedCalled int; called int}
}

func (_this *mockWithLambda[T]) Foo(a int, b ...string) (r0 bool) {
	for _, _check := range _this.vFoo {
		if _check.validateArgs == nil || _check.validateArgs(a, b...) {
			_check.called++
			return _check.fun(a, b...)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Foo", a, b)
	return
}

func (_this *mockWithLambda[T]) Bar(b ...struct{}) (r0 bool) {
	for _, _check := range _this.vBar {
		if _check.validateArgs == nil || _check.validateArgs(b...) {
			_check.called++
			return _check.fun(b...)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Bar", b)
	return
}

func (_this *mockWithLambda[T]) Baz(b ...T) (r0 bool) {
	for _, _check := range _this.vBaz {
		if _check.validateArgs == nil || _check.validateArgs(b...) {
			_check.called++
			return _check.fun(b...)
		}
	}
	_this.t.Helper()
	_this.unexpectedCall("Baz", b)
	return
}

func (_this *mockWithLambda[T]) unexpectedCall(method string, args ...any) {
	argsStr := ""
	for idx, arg := range args {
		switch t := reflect.TypeOf(arg); {
		case t.Kind() == reflect.Func:
			argsStr += fmt.Sprintf("%T", t)
		case t.Kind() == reflect.String:
			argsStr += fmt.Sprintf("%q", arg)
		default:
			argsStr += fmt.Sprintf("%+v", arg)
		}
		if idx+1 < len(args) {
			argsStr += ", "
		}
	}
	_this.t.Helper()
	_this.t.Fatalf(`Unexpected call to %s(). If function call is expected add ".WHEN.%s()" to mock.`, method, method)
}

// WHEN is used to set the mock behavior when a specific functions on the object are called.
// Use this to setup your mock for your specific test scenario.
func (_this *mockWithLambda[T]) WHEN() *mockWithLambdaWhen[T] {
	return &mockWithLambdaWhen[T]{
		m: _this,
	}
}

type mockWithLambdaWhen[T comparable] struct {
	m *mockWithLambda[T]
}

// Defines the behavior when Foo of the mock is called.
//
// As a default the method can be called any times.
// To change this behavior use the Times() method to define how often the function shall be called.
func (_this *mockWithLambdaWhen[T]) Foo() *mockWithLambdaFooExpect[T] {
	for _, f := range _this.m.vFoo {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Foo' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(a int, b ...string) (r0 bool)
		validateArgs func(a int, b ...string) bool
		expectedCalled int
		called int
	}
	validator.fun = func(a int, b ...string) (r0 bool) { return }
	validator.expectedCalled = -1
	_this.m.vFoo = append(_this.m.vFoo, &validator)
	return &mockWithLambdaFooExpect[T] {
		mockWithLambdaFooWhen: &mockWithLambdaFooWhen[T]{fun: &validator.fun, mockWithLambdaTimes: &mockWithLambdaTimes{expectedCalled: &validator.expectedCalled}},
		validateArgs: &validator.validateArgs,
	}
}

type mockWithLambdaFooExpect[T comparable] struct {
	*mockWithLambdaFooWhen[T]
	validateArgs *func(a int, b ...string) bool
}

// Expect will filter for given arguments.
// Each argument is matched with a filter function. Only if all arguments match this mocked function will be called.

// Arguments are either evaluated using the function, or ignored and always true if the function is set to nil.
func (_this *mockWithLambdaFooExpect[T]) Expect(a func(int) bool, b ...func(string) bool) *mockWithLambdaFooWhen[T] {
	if !(a == nil && len(b) == 0) {
		*_this.validateArgs = func(_a int, _b ...string) bool {
			for _idx, _val := range _b {
				if _idx >= len(b) || !(b[_idx] == nil || b[_idx](_val)) {
					return false
				}
			}
			return (a == nil || a(_a)) && true
		}
	}
	return _this.mockWithLambdaFooWhen
}

type mockWithLambdaFooWhen[T comparable] struct {
	*mockWithLambdaTimes
	fun *func(a int, b ...string) (r0 bool)
}

// Return the provided values when called
func (_this *mockWithLambdaFooWhen[T]) Return(r0 bool) *mockWithLambdaTimes {
	*_this.fun = func(int, ...string) (bool) { return r0 }
	return _this.mockWithLambdaTimes
}

// Do will execute the provided function and return the result when called
func (_this *mockWithLambdaFooWhen[T]) Do(do func(a int, b ...string) (r0 bool)) *mockWithLambdaTimes {
	*_this.fun = do
	return _this.mockWithLambdaTimes
}

// Defines the behavior when Bar of the mock is called.
//
// As a default the method can be called any times.
// To change this behavior use the Times() method to define how often the function shall be called.
func (_this *mockWithLambdaWhen[T]) Bar() *mockWithLambdaBarExpect[T] {
	for _, f := range _this.m.vBar {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Bar' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(b ...struct{}) (r0 bool)
		validateArgs func(b ...struct{}) bool
		expectedCalled int
		called int
	}
	validator.fun = func(b ...struct{}) (r0 bool) { return }
	validator.expectedCalled = -1
	_this.m.vBar = append(_this.m.vBar, &validator)
	return &mockWithLambdaBarExpect[T] {
		mockWithLambdaBarWhen: &mockWithLambdaBarWhen[T]{fun: &validator.fun, mockWithLambdaTimes: &mockWithLambdaTimes{expectedCalled: &validator.expectedCalled}},
		validateArgs: &validator.validateArgs,
	}
}

type mockWithLambdaBarExpect[T comparable] struct {
	*mockWithLambdaBarWhen[T]
	validateArgs *func(b ...struct{}) bool
}

// Expect will filter for given arguments.
// Each argument is matched with a filter function. Only if all arguments match this mocked function will be called.

// Arguments are either evaluated using the function, or ignored and always true if the function is set to nil.
func (_this *mockWithLambdaBarExpect[T]) Expect(b ...func(struct{}) bool) *mockWithLambdaBarWhen[T] {
	if !(len(b) == 0) {
		*_this.validateArgs = func(_b ...struct{}) bool {
			for _idx, _val := range _b {
				if _idx >= len(b) || !(b[_idx] == nil || b[_idx](_val)) {
					return false
				}
			}
			return true
		}
	}
	return _this.mockWithLambdaBarWhen
}

type mockWithLambdaBarWhen[T comparable] struct {
	*mockWithLambdaTimes
	fun *func(b ...struct{}) (r0 bool)
}

// Return the provided values when called
func (_this *mockWithLambdaBarWhen[T]) Return(r0 bool) *mockWithLambdaTimes {
	*_this.fun = func(...struct{}) (bool) { return r0 }
	return _this.mockWithLambdaTimes
}

// Do will execute the provided function and return the result when called
func (_this *mockWithLambdaBarWhen[T]) Do(do func(b ...struct{}) (r0 bool)) *mockWithLambdaTimes {
	*_this.fun = do
	return _this.mockWithLambdaTimes
}

// Defines the behavior when Baz of the mock is called.
//
// As a default the method can be called any times.
// To change this behavior use the Times() method to define how often the function shall be called.
func (_this *mockWithLambdaWhen[T]) Baz() *mockWithLambdaBazExpect[T] {
	for _, f := range _this.m.vBaz {
		if f.validateArgs == nil {
			_this.m.t.Helper()
			_this.m.t.Fatalf("Unreachable condition. Call to 'Baz' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(b ...T) (r0 bool)
		validateArgs func(b ...T) bool
		expectedCalled int
		called int
	}
	validator.fun = func(b ...T) (r0 bool) { return }
	validator.expectedCalled = -1
	_this.m.vBaz = append(_this.m.vBaz, &validator)
	return &mockWithLambdaBazExpect[T] {
		mockWithLambdaBazWhen: &mockWithLambdaBazWhen[T]{fun: &validator.fun, mockWithLambdaTimes: &mockWithLambdaTimes{expectedCalled: &validator.expectedCalled}},
		validateArgs: &validator.validateArgs,
	}
}

type mockWithLambdaBazExpect[T comparable] struct {
	*mockWithLambdaBazWhen[T]
	validateArgs *func(b ...T) bool
}

// Expect will filter for given arguments.
// Each argument is matched with a filter function. Only if all arguments match this mocked function will be called.

// Arguments are either evaluated using the function, or ignored and always true if the function is set to nil.
func (_this *mockWithLambdaBazExpect[T]) Expect(b ...func(T) bool) *mockWithLambdaBazWhen[T] {
	if !(len(b) == 0) {
		*_this.validateArgs = func(_b ...T) bool {
			for _idx, _val := range _b {
				if _idx >= len(b) || !(b[_idx] == nil || b[_idx](_val)) {
					return false
				}
			}
			return true
		}
	}
	return _this.mockWithLambdaBazWhen
}

type mockWithLambdaBazWhen[T comparable] struct {
	*mockWithLambdaTimes
	fun *func(b ...T) (r0 bool)
}

// Return the provided values when called
func (_this *mockWithLambdaBazWhen[T]) Return(r0 bool) *mockWithLambdaTimes {
	*_this.fun = func(...T) (bool) { return r0 }
	return _this.mockWithLambdaTimes
}

// Do will execute the provided function and return the result when called
func (_this *mockWithLambdaBazWhen[T]) Do(do func(b ...T) (r0 bool)) *mockWithLambdaTimes {
	*_this.fun = do
	return _this.mockWithLambdaTimes
}

type mockWithLambdaTimes struct {
	expectedCalled *int
}

// Times sets how often the mocked function is expected to be called.
// Test will fail if the number of calls do not match with the expected calls value.
//
// A number < 0 means that a function may be called any times which is also the default behavior.
func (_this *mockWithLambdaTimes) Times(times int) {
	*_this.expectedCalled = times
}

// AnyTimes disables the check how often a function was called.
func (_this *mockWithLambdaTimes) AnyTimes() {
	*_this.expectedCalled = -1
}

// Never will fail if the function is ever called. Is the same as Times(0).
func (_this *mockWithLambdaTimes) Never() {
	*_this.expectedCalled = 0
}

// Once will fail if the function is not called once. Is the same as Times(1).
func (_this *mockWithLambdaTimes) Once() {
	*_this.expectedCalled = 1
}
