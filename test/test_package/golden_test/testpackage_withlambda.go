// DO NOT EDIT
// Code generated by smock 

package testpackage_mock

import (
	"fmt"
	"reflect"
)

func NewMockWithLambda[T comparable](t interface {
	Fatalf(format string, args ...interface{})
	Helper()
}) *MockWithLambda[T] {
	return &MockWithLambda[T]{t: t}
}

type MockWithLambda[T comparable] struct {
	t interface {
		Fatalf(format string, args ...interface{})
		Helper()
	}
	
	vFoo []*struct{fun func(a int, b ...string) (r0 bool); validateArgs func(a int, b ...string) bool}
	vBar []*struct{fun func(b ...struct{}) (r0 bool); validateArgs func(b ...struct{}) bool}
	vBaz []*struct{fun func(b ...T) (r0 bool); validateArgs func(b ...T) bool}
}

func (m *MockWithLambda[T]) Foo(a int, b ...string) (r0 bool) {
	for _, check := range m.vFoo {
		if check.validateArgs == nil || check.validateArgs(a, b...) {
			return check.fun(a, b...)
		}
	}
	m.unexpectedCall("Foo", a, b)
	return
}

func (m *MockWithLambda[T]) Bar(b ...struct{}) (r0 bool) {
	for _, check := range m.vBar {
		if check.validateArgs == nil || check.validateArgs(b...) {
			return check.fun(b...)
		}
	}
	m.unexpectedCall("Bar", b)
	return
}

func (m *MockWithLambda[T]) Baz(b ...T) (r0 bool) {
	for _, check := range m.vBaz {
		if check.validateArgs == nil || check.validateArgs(b...) {
			return check.fun(b...)
		}
	}
	m.unexpectedCall("Baz", b)
	return
}

func (m *MockWithLambda[T]) unexpectedCall(method string, args ...any) {
	argsStr := ""
	for idx, arg := range args {
		t := reflect.TypeOf(arg)
		if t.Kind() == reflect.Func {
			argsStr += fmt.Sprintf("%T", t)
		} else {
			argsStr += fmt.Sprintf("%+v", t)
		}
		if idx+1 < len(args) {
			argsStr += ", "
		}
	}
	m.t.Helper()
	m.t.Fatalf(`Unexpected call to MockWithLambda.%s(%s)`, method, argsStr)
}

func (m *MockWithLambda[T]) WHEN() *MockWithLambdaWhen[T] {
	return &MockWithLambdaWhen[T]{
		m: m,
	}
}

type MockWithLambdaWhen[T comparable] struct {
	m *MockWithLambda[T]
}

func (mh *MockWithLambdaWhen[T]) Foo() *MockWithLambdaFooArgs[T] {
	for _, f := range  mh.m.vFoo {
		if f.validateArgs == nil {
			mh.m.t.Helper()
			mh.m.t.Fatalf("Unreachable condition. Call to 'Foo' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(a int, b ...string) (r0 bool)
		validateArgs func(a int, b ...string) bool
	}
	validator.fun = func(a int, b ...string) (r0 bool) { return }
	mh.m.vFoo = append(mh.m.vFoo, &validator)
	return &MockWithLambdaFooArgs[T] {
		MockWithLambdaFooArgsEval: MockWithLambdaFooArgsEval[T]{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockWithLambdaFooArgs[T comparable] struct {
	MockWithLambdaFooArgsEval[T]
	fun *func(a int, b ...string) (r0 bool)
	validateArgs *func(a int, b ...string) bool
}

func (f *MockWithLambdaFooArgs[T]) ExpectArgs(matcha interface{Match(int) bool}, matchb ...interface{Match(string) bool}) *MockWithLambdaFooArgsEval[T] {
	if !(matcha == nil && len(matchb) == 0) {
		*f.validateArgs = func(a int, b ...string) bool {
			for idx, v := range b {
				if idx >= len(matchb) || !(matchb[idx] == nil || matchb[idx].Match(v)) {
					return false
				}
			}
			return (matcha == nil || matcha.Match(a)) && true
		}
	}
	return &f.MockWithLambdaFooArgsEval
}

type MockWithLambdaFooArgsEval[T comparable] struct {
	fun *func(a int, b ...string) (r0 bool)
}

func (f *MockWithLambdaFooArgsEval[T]) Return(r0 bool) {
	*f.fun = func(int, ...string) (bool) { return r0 }
}

func (f *MockWithLambdaFooArgsEval[T]) Do(do func(a int, b ...string) (r0 bool)) {
	*f.fun = do
}

func (mh *MockWithLambdaWhen[T]) Bar() *MockWithLambdaBarArgs[T] {
	for _, f := range  mh.m.vBar {
		if f.validateArgs == nil {
			mh.m.t.Helper()
			mh.m.t.Fatalf("Unreachable condition. Call to 'Bar' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(b ...struct{}) (r0 bool)
		validateArgs func(b ...struct{}) bool
	}
	validator.fun = func(b ...struct{}) (r0 bool) { return }
	mh.m.vBar = append(mh.m.vBar, &validator)
	return &MockWithLambdaBarArgs[T] {
		MockWithLambdaBarArgsEval: MockWithLambdaBarArgsEval[T]{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockWithLambdaBarArgs[T comparable] struct {
	MockWithLambdaBarArgsEval[T]
	fun *func(b ...struct{}) (r0 bool)
	validateArgs *func(b ...struct{}) bool
}

func (f *MockWithLambdaBarArgs[T]) ExpectArgs(matchb ...interface{Match(struct{}) bool}) *MockWithLambdaBarArgsEval[T] {
	if !(len(matchb) == 0) {
		*f.validateArgs = func(b ...struct{}) bool {
			for idx, v := range b {
				if idx >= len(matchb) || !(matchb[idx] == nil || matchb[idx].Match(v)) {
					return false
				}
			}
			return true
		}
	}
	return &f.MockWithLambdaBarArgsEval
}

type MockWithLambdaBarArgsEval[T comparable] struct {
	fun *func(b ...struct{}) (r0 bool)
}

func (f *MockWithLambdaBarArgsEval[T]) Return(r0 bool) {
	*f.fun = func(...struct{}) (bool) { return r0 }
}

func (f *MockWithLambdaBarArgsEval[T]) Do(do func(b ...struct{}) (r0 bool)) {
	*f.fun = do
}

func (mh *MockWithLambdaWhen[T]) Baz() *MockWithLambdaBazArgs[T] {
	for _, f := range  mh.m.vBaz {
		if f.validateArgs == nil {
			mh.m.t.Helper()
			mh.m.t.Fatalf("Unreachable condition. Call to 'Baz' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(b ...T) (r0 bool)
		validateArgs func(b ...T) bool
	}
	validator.fun = func(b ...T) (r0 bool) { return }
	mh.m.vBaz = append(mh.m.vBaz, &validator)
	return &MockWithLambdaBazArgs[T] {
		MockWithLambdaBazArgsEval: MockWithLambdaBazArgsEval[T]{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockWithLambdaBazArgs[T comparable] struct {
	MockWithLambdaBazArgsEval[T]
	fun *func(b ...T) (r0 bool)
	validateArgs *func(b ...T) bool
}

func (f *MockWithLambdaBazArgs[T]) ExpectArgs(matchb ...interface{Match(T) bool}) *MockWithLambdaBazArgsEval[T] {
	if !(len(matchb) == 0) {
		*f.validateArgs = func(b ...T) bool {
			for idx, v := range b {
				if idx >= len(matchb) || !(matchb[idx] == nil || matchb[idx].Match(v)) {
					return false
				}
			}
			return true
		}
	}
	return &f.MockWithLambdaBazArgsEval
}

type MockWithLambdaBazArgsEval[T comparable] struct {
	fun *func(b ...T) (r0 bool)
}

func (f *MockWithLambdaBazArgsEval[T]) Return(r0 bool) {
	*f.fun = func(...T) (bool) { return r0 }
}

func (f *MockWithLambdaBazArgsEval[T]) Do(do func(b ...T) (r0 bool)) {
	*f.fun = do
}
