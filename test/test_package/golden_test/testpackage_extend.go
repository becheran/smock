// DO NOT EDIT
// Code generated by smock 

package testpackage_mock

import (
	io "io"
	os "os"
	testpackage "github.com/test/testpackage"
	"fmt"
	"reflect"
)

// MockExtend must implement interface testpackage.Extend
var _ testpackage.Extend = &MockExtend{}

func NewMockExtend(t interface {
	Fatalf(format string, args ...interface{})
	Helper()
}) *MockExtend {
	return &MockExtend{t: t}
}

type MockExtend struct {
	t interface {
		Fatalf(format string, args ...interface{})
		Helper()
	}
	
	vRetType []*struct{fun func() (r0 testpackage.MyType); validateArgs func() bool}
	vUseStdType []*struct{fun func(fi os.FileInfo) (r0 io.Reader); validateArgs func(fi os.FileInfo) bool}
}

func (m *MockExtend) RetType() (r0 testpackage.MyType) {
	for _, check := range m.vRetType {
		if check.validateArgs == nil || check.validateArgs() {
			return check.fun()
		}
	}
	m.unexpectedCall("RetType", )
	return
}

func (m *MockExtend) UseStdType(fi os.FileInfo) (r0 io.Reader) {
	for _, check := range m.vUseStdType {
		if check.validateArgs == nil || check.validateArgs(fi) {
			return check.fun(fi)
		}
	}
	m.unexpectedCall("UseStdType", fi)
	return
}

func (m *MockExtend) unexpectedCall(method string, args ...any) {
	argsStr := ""
	for idx, arg := range args {
		t := reflect.TypeOf(arg)
		if t.Kind() == reflect.Func {
			argsStr += fmt.Sprintf("%T", t)
		} else {
			argsStr += fmt.Sprintf("%+v", t)
		}
		if idx+1 < len(args) {
			argsStr += ", "
		}
	}
	m.t.Helper()
	m.t.Fatalf(`Unexpected call to MockExtend.%s(%s)`, method, argsStr)
}

func (m *MockExtend) WHEN() *MockExtendWhen {
	return &MockExtendWhen{
		m: m,
	}
}

type MockExtendWhen struct {
	m *MockExtend
}

func (mh *MockExtendWhen) RetType() *MockExtendRetTypeArgsEval {
	for _, f := range  mh.m.vRetType {
		if f.validateArgs == nil {
			mh.m.t.Helper()
			mh.m.t.Fatalf("Unreachable condition. Call to 'RetType' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func() (r0 testpackage.MyType)
		validateArgs func() bool
	}
	validator.fun = func() (r0 testpackage.MyType) { return }
	mh.m.vRetType = append(mh.m.vRetType, &validator)
	return &MockExtendRetTypeArgsEval {
		fun: &validator.fun,
	}
}

type MockExtendRetTypeArgsEval struct {
	fun *func() (r0 testpackage.MyType)
}

func (f *MockExtendRetTypeArgsEval) Return(r0 testpackage.MyType) {
	*f.fun = func() (testpackage.MyType) { return r0 }
}

func (f *MockExtendRetTypeArgsEval) Do(do func() (r0 testpackage.MyType)) {
	*f.fun = do
}

func (mh *MockExtendWhen) UseStdType() *MockExtendUseStdTypeArgs {
	for _, f := range  mh.m.vUseStdType {
		if f.validateArgs == nil {
			mh.m.t.Helper()
			mh.m.t.Fatalf("Unreachable condition. Call to 'UseStdType' is already captured by previous WHEN statement.")
		}
	}
	var validator struct {
		fun func(fi os.FileInfo) (r0 io.Reader)
		validateArgs func(fi os.FileInfo) bool
	}
	validator.fun = func(fi os.FileInfo) (r0 io.Reader) { return }
	mh.m.vUseStdType = append(mh.m.vUseStdType, &validator)
	return &MockExtendUseStdTypeArgs {
		MockExtendUseStdTypeArgsEval: MockExtendUseStdTypeArgsEval{fun: &validator.fun},
		validateArgs: &validator.validateArgs,
		fun: &validator.fun,
	}
}

type MockExtendUseStdTypeArgs struct {
	MockExtendUseStdTypeArgsEval
	fun *func(fi os.FileInfo) (r0 io.Reader)
	validateArgs *func(fi os.FileInfo) bool
}

func (f *MockExtendUseStdTypeArgs) Expect(fi func(os.FileInfo) bool) *MockExtendUseStdTypeArgsEval {
	if !(fi == nil) {
		*f.validateArgs = func(matchfi os.FileInfo) bool {
			return (fi == nil || fi(matchfi))
		}
	}
	return &f.MockExtendUseStdTypeArgsEval
}

type MockExtendUseStdTypeArgsEval struct {
	fun *func(fi os.FileInfo) (r0 io.Reader)
}

func (f *MockExtendUseStdTypeArgsEval) Return(r0 io.Reader) {
	*f.fun = func(os.FileInfo) (io.Reader) { return r0 }
}

func (f *MockExtendUseStdTypeArgsEval) Do(do func(fi os.FileInfo) (r0 io.Reader)) {
	*f.fun = do
}
